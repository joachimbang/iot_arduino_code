#include <DHT.h>            // Biblioth√®que pour lire le capteur DHT (temp√©rature/humidit√©)
#include <WiFi.h>           // Biblioth√®que pour la connexion WiFi de l‚ÄôESP32
#include <PubSubClient.h>   // Biblioth√®que pour le protocole MQTT
#include <ESP32Servo.h>     // Biblioth√®que pour contr√¥ler un servo-moteur avec l‚ÄôESP32

// --- Broches ---
#define DHTPIN 4            // Broche utilis√©e pour connecter le DHT11
#define LED_PIN 26          // Broche de la LED
#define SERVO_PIN 2         // Broche du servo-moteur
#define LDR_PIN 34          // Broche analogique pour la photor√©sistance (LDR)
#define TRIG_PIN 5          // Broche TRIG du capteur ultrason (HC-SR04)
#define ECHO_PIN 18         // Broche ECHO du capteur ultrason (HC-SR04)

// --- Capteur DHT ---
#define DHTTYPE DHT11       // Type du capteur DHT utilis√© (ici DHT11)
DHT dht(DHTPIN, DHTTYPE);   // Cr√©ation de l‚Äôobjet DHT avec la broche et le type
Servo servo;                // Cr√©ation d‚Äôun objet Servo pour piloter le moteur

// --- R√©seau ---
const char* ssid = ".";             // Nom du r√©seau WiFi
const char* password = "1-1-1-";    // Mot de passe WiFi
// ----- R√©seau de test Wokwi -----
// const char* ssid = "Wokwi-GUEST";
// const char* password = "";
const char* mqttServer = "broker.hivemq.com"; // Adresse du broker MQTT
const int mqttPort = 1883;          // Port utilis√© pour MQTT (1883 = standard non s√©curis√©)

WiFiClient espClient;       // Objet client WiFi
PubSubClient client(espClient); // Objet MQTT bas√© sur le client WiFi

// --- Topics MQTT ---
const char* topic_dht = "tp/dht11";       // Topic pour envoyer temp√©rature/humidit√©
const char* topic_ldr = "tp/ldr";         // Topic pour envoyer luminosit√©
const char* topic_distance = "tp/distance"; // Topic pour envoyer la distance ultrason
const char* topic_led = "tp/led";         // Topic pour recevoir commandes LED
const char* topic_servo = "tp/servo";     // Topic pour recevoir commandes Servo

// --- Variables de gestion du temps ---
unsigned long previousMillis = 0;   // Stocke le dernier instant o√π les capteurs ont √©t√© lus
const long interval = 2000;         // Intervalle de lecture = 2 secondes

// --- Connexion WiFi ---
void setup_wifi() {
  delay(10);                        // Petite pause avant d‚Äôessayer la connexion
  WiFi.begin(ssid, password);       // Connexion au r√©seau WiFi
  Serial.print("Connexion WiFi");   // Message d‚Äôattente
  while (WiFi.status() != WL_CONNECTED) { // Tant que non connect√©
    delay(500);                     // Attendre 500 ms
    Serial.print(".");              // Afficher un point (indicateur)
  }
  Serial.println("");               // Retour √† la ligne
  Serial.println(" WiFi connect√©");       // Confirmation
  Serial.println("Adresse IP : " + WiFi.localIP().toString()); // Afficher IP obtenue
}

// --- Fonction de rappel MQTT quand un message est re√ßu ---
void callback(char* topic, byte* payload, unsigned int length) {
  String data = "";                 // Variable pour stocker le message re√ßu
  for (int i = 0; i < length; i++) data += (char)payload[i]; // Conversion payload en texte
  data.trim();                      // Supprimer espaces inutiles
  data.toLowerCase();               // Passer en minuscules pour comparaison

  Serial.print(" Message re√ßu sur ");
  Serial.println(topic);            // Affiche le topic concern√©
  Serial.println("Contenu : " + data); // Affiche le message re√ßu

  // --- Contr√¥le LED ---
  if (String(topic) == topic_led) { // Si le message vient du topic "tp/led"
    if (data == "on" || data == "true" || data == "1") {
      digitalWrite(LED_PIN, HIGH);  // Allumer la LED
      Serial.println(" LED ‚Üí ON");
    } else {
      digitalWrite(LED_PIN, LOW);   // √âteindre la LED
      Serial.println(" LED ‚Üí OFF");
    }
  }

  // --- Contr√¥le Servo ---
  if (String(topic) == topic_servo) { // Si message sur "tp/servo"
    int degree = constrain(data.toInt(), 0, 180); // Convertir en nombre et limiter 0-180¬∞
    servo.write(degree);              // D√©placer le servo
    Serial.print(" Servo d√©plac√© √† : ");
    Serial.println(degree);           // Afficher la valeur re√ßue
  }
}

// --- Fonction de reconnexion MQTT ---
void reconnect() {
  if (!client.connected()) {          // V√©rifier si le client est d√©connect√©
    Serial.print("Connexion MQTT...");
    String clientId = "ESP32Client-" + String(random(0xffff), HEX); // ID al√©atoire
    if (client.connect(clientId.c_str())) { // Tentative de connexion
      Serial.println("‚úÖ MQTT connect√©");
      client.subscribe(topic_led);    // S‚Äôabonner au topic LED
      client.subscribe(topic_servo);  // S‚Äôabonner au topic Servo
      Serial.println("üìå Topics abonn√©s");
    } else {
      Serial.print("‚ùå √âchec, code erreur = ");
      Serial.println(client.state()); // Afficher le code d‚Äôerreur
      Serial.println("Nouvelle tentative dans 5 secondes");
    }
  }
}

// --- Lecture capteur ultrason ---
long readDistance() {
  digitalWrite(TRIG_PIN, LOW); delayMicroseconds(2);   // Envoyer impulsion basse
  digitalWrite(TRIG_PIN, HIGH); delayMicroseconds(10); // Envoyer impulsion haute (10 ¬µs)
  digitalWrite(TRIG_PIN, LOW);                         // Couper l‚Äôimpulsion
  long duration = pulseIn(ECHO_PIN, HIGH);             // Lire temps de retour
  return duration * 0.034 / 2; // Convertir en distance (cm) (vitesse du son = 0.034 cm/¬µs)
}

// --- Test initial du DHT ---
void testDHT() {
  float t = dht.readTemperature();  // Lire temp√©rature
  float h = dht.readHumidity();     // Lire humidit√©
  if (!isnan(t) && !isnan(h)) {     // V√©rifier si valeurs valides
    Serial.printf("‚úÖ Test DHT11 OK ‚Üí %.2f¬∞C, %.2f%%\n", t, h);
  } else {
    Serial.println("‚ö†Ô∏è Erreur lecture DHT11 ! V√©rifiez c√¢blage et r√©sistance.");
  }
}

// --- Fonction d‚Äôinitialisation ---
void setup() {
  Serial.begin(9600);               // D√©marrer la communication s√©rie √† 9600 bauds

  pinMode(LED_PIN, OUTPUT);         // Configurer LED comme sortie
  digitalWrite(LED_PIN, LOW);       // √âteindre LED par d√©faut
  pinMode(TRIG_PIN, OUTPUT);        // TRIG en sortie
  pinMode(ECHO_PIN, INPUT);         // ECHO en entr√©e

  servo.attach(SERVO_PIN);          // Attacher servo √† sa broche
  servo.write(0);                   // Position initiale √† 0¬∞

  dht.begin();                      // Initialiser le capteur DHT
  delay(2000);                      // Attente pour stabilisation du capteur
  testDHT();                        // Faire un premier test

  setup_wifi();                     // Connexion au WiFi
  client.setServer(mqttServer, mqttPort); // D√©finir serveur MQTT
  client.setCallback(callback);     // Associer fonction callback
}

// --- Boucle principale ---
void loop() {
  client.loop();                    // Garder la connexion MQTT active
  reconnect();                      // V√©rifier si MQTT est connect√© sinon retenter

  unsigned long currentMillis = millis(); // Temps actuel en ms
  if (currentMillis - previousMillis >= interval) { // Toutes les 2 secondes
    previousMillis = currentMillis; // Mise √† jour du temps

    // --- Lecture DHT11 ---
    float temp = dht.readTemperature(); // Temp√©rature
    float hum  = dht.readHumidity();    // Humidit√©
    if (!isnan(temp) && !isnan(hum)) {
      String dhtMsg = String(temp) + "," + String(hum); // Formater donn√©es
      client.publish(topic_dht, dhtMsg.c_str());        // Publier MQTT
      Serial.printf("üå°Ô∏è DHT11 ‚Üí %.2f¬∞C, %.2f%%\n", temp, hum);
    } else {
      Serial.println("‚ö†Ô∏è Erreur lecture DHT11 !");
    }

    // --- Lecture LDR ---
    int ldrValue = analogRead(LDR_PIN);   // Lire valeur analogique
    client.publish(topic_ldr, String(ldrValue).c_str()); // Publier MQTT
    Serial.println("üîÜ LDR ‚Üí " + String(ldrValue));

    // --- Lecture Ultrason ---
    long distance = readDistance();       // Calculer distance
    client.publish(topic_distance, String(distance).c_str()); // Publier MQTT
    Serial.println("üìè Distance ‚Üí " + String(distance) + " cm");
  }
}
